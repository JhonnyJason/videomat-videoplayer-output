// Generated by CoffeeScript 2.5.1
(function() {
  var Player, allPlayers, clearElement, defaultOptions, getVideoType, initializeAutoplay, initializeAutoplayElement, initializeElements, initializeRegular, initializeRegularElement, nextIndex, onPlay, setRandomCurrentTime, videoplayer, writeOptions;

  videoplayer = {};

  //###########################################################
  defaultOptions = {
    elements: "video",
    mode: "regular",
    randostart: false,
    initialVolume: 0.2
  };

  allPlayers = [];

  nextIndex = 0;

  //###########################################################
  Player = class Player {
    constructor(options) {
      this.index = nextIndex;
      allPlayers[this.index] = this;
      nextIndex++;
      writeOptions(options, this);
      initializeElements(this);
      return;
    }

    pauseAll() {
      var el, i, len, ref;
      ref = this.elements;
      for (i = 0, len = ref.length; i < len; i++) {
        el = ref[i];
        el.pause();
      }
    }

    playAll() {
      var el, i, len, ref;
      ref = this.elements;
      for (i = 0, len = ref.length; i < len; i++) {
        el = ref[i];
        el.play();
      }
    }

    destroy() {
      var el, i, j, len, len1, movedPlayer, ref, ref1;
      nextIndex--;
      if (this.index !== nextIndex) {
        movedPlayer = allPlayers[nextIndex];
        allPlayers[this.index] = movedPlayer;
        movedPlayer.index = this.index;
        ref = movedPlayer.elements;
        for (i = 0, len = ref.length; i < len; i++) {
          el = ref[i];
          el.setAttribute("allPlayers-index", "" + this.index);
        }
      }
      allPlayers[nextIndex] = null;
      ref1 = this.elements;
      //# Destroy Content
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        el = ref1[j];
        clearElement(el);
        if (this.mode === "autoplay") {
          el.removeEventListener("loadedmetadata", setRandomCurrentTime);
        }
        if (this.mode === "regular") {
          el.removeEventListener("play", onPlay);
        }
      }
      this.elements = null;
      this.mode = null;
      this.randostart = null;
      this.initialVolume = null;
    }

  };

  //###########################################################
  //region internalFunctions
  writeOptions = function(o, p) {
    var key, value;
    if (o == null) {
      o = {};
    }
//# fill missing options with default
    for (key in defaultOptions) {
      value = defaultOptions[key];
      if (o[key] == null) {
        o[key] = defaultOptions[key];
      }
    }
    //# fill class properties with the options
    p.elements = o.elements;
    p.mode = o.mode.toLowerCase();
    p.randostart = o.randostart;
    p.initialVolume = o.initialVolume;
    if (p.mode === "regular") {
      p.randostart = false;
    }
  };

  initializeElements = function(p) {
    var el, i, len, ref;
    //# make sure we have an Array of the DOM Elements
    if (typeof p.elements === "string") {
      p.elements = document.querySelectorAll(p.elements);
    } else if (!Array.isArray(p.elements)) {
      p.elements = [p.elements];
    }
    if (p.elements.length === 0) {
      throw new Error("No Elements Found!");
    }
    ref = p.elements;
    
    //# assert they are valid Video Element Nodes
    for (i = 0, len = ref.length; i < len; i++) {
      el = ref[i];
      if (el.nodeType !== 1 || el.tagName !== "VIDEO") {
        throw new Error("One element wasn't a valid Video Element Node.");
      }
    }
    
    // now we should have an Array with Dom Element Nodes
    if (p.mode === "regular") {
      initializeRegular(p);
    }
    if (p.mode === "autoplay") {
      initializeAutoplay(p);
    }
  };

  
  //###########################################################
  initializeAutoplay = function(p) {
    var el, i, len, ref;
    ref = p.elements;
    for (i = 0, len = ref.length; i < len; i++) {
      el = ref[i];
      initializeAutoplayElement(el, p);
    }
  };

  initializeRegular = function(p) {
    var el, i, len, ref;
    ref = p.elements;
    for (i = 0, len = ref.length; i < len; i++) {
      el = ref[i];
      initializeRegularElement(el, p);
    }
  };

  //###########################################################
  initializeAutoplayElement = function(el, p) {
    var sourceElement, sourceSrc, sourceType, trackElement, trackSrc;
    // get Attributes we need
    sourceSrc = el.getAttribute("src");
    sourceType = getVideoType(sourceSrc);
    trackSrc = el.getAttribute("vtt");
    clearElement(el);
    
    // add desired attributes and childs
    sourceElement = document.createElement("SOURCE");
    sourceElement.setAttribute("src", sourceSrc);
    sourceElement.setAttribute("type", sourceType);
    trackElement = document.createElement("TRACK");
    trackElement.setAttribute("src", trackSrc);
    trackElement.setAttribute("default", true);
    // add new childs
    el.appendChild(sourceElement);
    el.appendChild(trackElement);
    // set Attributes
    el.muted = true;
    el.loop = true;
    el.autoplay = true;
    // el.setAttribute("controls", false)
    if (p.randostart) {
      el.addEventListener("loadedmetadata", setRandomCurrentTime);
    }
  };

  initializeRegularElement = function(el, p) {
    var sourceElement, sourceSrc, sourceType, trackElement, trackSrc;
    // get Attributes we need
    sourceSrc = el.getAttribute("src");
    sourceType = getVideoType(sourceSrc);
    trackSrc = el.getAttribute("vtt");
    clearElement(el);
    // add desired attributes and childs
    sourceElement = document.createElement("SOURCE");
    sourceElement.setAttribute("src", sourceSrc);
    sourceElement.setAttribute("type", sourceType);
    trackElement = document.createElement("TRACK");
    trackElement.setAttribute("src", trackSrc);
    trackElement.setAttribute("default", true);
    // add new childs
    el.appendChild(sourceElement);
    el.appendChild(trackElement);
    // add Event Listeners
    el.addEventListener("play", onPlay);
    // el.addEventListener("pause", onPause)

    // set Attributes
    el.setAttribute("controls", true);
    el.setAttribute("controlsList", "nodownload");
    el.setAttribute("allPlayers-index", "" + p.index);
    // el.setAttribute("preload", "none")
    el.volume = p.initialVolume;
  };

  //###########################################################
  clearElement = function(el) {
    var attr, attributes, i, len;
    // remove all attributes and childs
    attributes = [...el.attributes];
    for (i = 0, len = attributes.length; i < len; i++) {
      attr = attributes[i];
      if (attr.name !== "id" && attr.name !== "class") {
        el.removeAttribute(attr.name);
      }
    }
    el.innerHTML = "";
  };

  //###########################################################
  getVideoType = function(source) {
    var last4, last5;
    last4 = source.slice(-4).toLowerCase();
    last5 = source.slice(-5).toLowerCase();
    if (last4 === ".mp4") {
      return "video/mp4";
    }
    if (last4 === ".ogg") {
      return "video/ogg";
    }
    if (last5 === ".webm") {
      return "video/webm";
    }
    throw new Error("Unknown sourcs type (" + last5 + ")");
    return "dafuck";
  };

  //###########################################################
  onPlay = function(evt) {
    var el, i, index, len, player, ref, thisElement;
    thisElement = evt.target;
    index = parseInt(thisElement.getAttribute("allPlayers-index"));
    player = allPlayers[index];
    ref = player.elements;
    for (i = 0, len = ref.length; i < len; i++) {
      el = ref[i];
      if (el !== thisElement) {
        el.pause();
      }
    }
  };

  setRandomCurrentTime = function(evt) {
    var el;
    el = evt.target;
    el.currentTime = Math.random() * el.duration;
  };

  //endregion

  //###########################################################
  //region exposedStuff
  videoplayer.create = function(options) {
    return new Player(options);
  };

  //endregion
  module.exports = videoplayer;

}).call(this);
